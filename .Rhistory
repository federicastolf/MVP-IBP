rm(list = ls())
source("utilities_MVPIBP.R")
source("gibbs_MVP_IBP.R")
setwd("~/Library/CloudStorage/Dropbox/probit IBP/simulation_MVPIBP")
library(Rcpp)
library(RcppArmadillo)
source("utilities_MVPIBP.R")
source("gibbs_MVP_IBP.R")
#--------------------------# Simulate data #---------------------------#
n = 50 # number of samples
#alpha_data = c(5, 10, 15, 20, 30, 40, 50, 60, 80, 100)
#alpha_data = seq(5,100, by=5)
alpha_data = c(10, 20)
my_seed = 4694
p = 300
corr = c("factor", "ts")
all_data = simulation_data(alpha_data, n, p, corr, my_seed)
## ------------- # Gibbs #----------------#
Niter = 2000
burnin = 500
set.seed(my_seed)
seeds_g = sample.int(5000, length(all_data))
alphat = c(rep(10,2), rep(20,2))
i=1
d1 = all_data[[i]]$data
# MVP-IBP factor model
param_MVPIBP = list(truncP = truncP, # truncation level for MVP-IBP
# parameter of gamma prior for alpha
a_alpha = mean(rowSums(d1)), b_alpha = 1,
eps_MH = 2.5, # epsilon for MH step
gamma = 10, # put the expected number of factors
a_theta = 2, b_theta = 1.5, theta_inf = 0.05, # CUSP parameters
# adaptation
start_adapt = 500, Kmax = p, a0_ad = -1, a1_ad = -5*10^(-4))
truncP = 50
# MVP-IBP factor model
param_MVPIBP = list(truncP = truncP, # truncation level for MVP-IBP
# parameter of gamma prior for alpha
a_alpha = mean(rowSums(d1)), b_alpha = 1,
eps_MH = 0.5, # epsilon for MH step
gamma = 10, # put the expected number of factors
a_theta = 2, b_theta = 1.5, theta_inf = 0.05, # CUSP parameters
# adaptation
start_adapt = 500, Kmax = p, a0_ad = -1, a1_ad = -5*10^(-4))
fit_gibbs = gibbs_MVPIBP(d1, param_MVPIBP, seeds_g[i], Niter)
plot(fit_gibbs$alpha)
plot(fit_gibbs$alpha, type="l")
plot(fit_gibbs$alpha[500:2000], type="l")
rm(list = ls())
source("utilities_MVPIBP.R")
source("gibbs_MVP_IBP.R")
#--------------------------# Simulate data #---------------------------#
n = 50 # number of samples
#alpha_data = c(5, 10, 15, 20, 30, 40, 50, 60, 80, 100)
#alpha_data = seq(5,100, by=5)
alpha_data = c(10, 20)
my_seed = 4694
p = 300
corr = c("factor", "ts")
all_data = simulation_data(alpha_data, n, p, corr, my_seed)
## ------------- # Gibbs #----------------#
Niter = 2000
burnin = 500
set.seed(my_seed)
seeds_g = sample.int(5000, length(all_data))
MSEpi_fMVPIBP = MSEpi_IBP = rep(0, length(all_data))
truncP = 50
alphat = c(rep(10,2), rep(20,2))
for(i in 1:length(all_data)){
d1 = all_data[[i]]$data
# MVP-IBP factor model
param_MVPIBP = list(truncP = truncP, # truncation level for MVP-IBP
# parameter of gamma prior for alpha
a_alpha = mean(rowSums(d1)), b_alpha = 1,
eps_MH = 0.5, # epsilon for MH step
gamma = 10, # put the expected number of factors
a_theta = 2, b_theta = 1.5, theta_inf = 0.05, # CUSP parameters
# adaptation
start_adapt = 500, Kmax = p, a0_ad = -1, a1_ad = -5*10^(-4))
fit_gibbs = gibbs_MVPIBP(d1, param_MVPIBP, seeds_g[i], Niter)
# IBP
param_IBP = list(truncP = truncP, # set P for MVP-IBP
# parameter of gamma prior for alpha
a_alpha = mean(rowSums(d1)), b_alpha = 1)
fit_IBP = Beta_Binom_IBP(d1, param_IBP, Niter)
# real values
MSEpi_IBP1 = MSEpi_MI1 = rep(0, Niter-burnin)
#--# compue MSE #---#
for(s in 1:(Niter-burnin)){
# MSE for pi IBPP
MSEpi_IBP1[s] = mean((fit_IBP$alpha[,burnin+s] - alphat[i])^2)
# MSE for pi MVP-IBP
MSEpi_MI1[s] = mean((pnorm(fit_gibbs$alpha[,burnin+s]) - alphat[i])^2)
}
MSEpi_fMVPIBP[i] = mean(MSEpi_MI1)
MSEpi_IBP[i] = mean(MSEpi_IBP1)
cat("simulation ",i,"out of",length(all_data),"\n")
}
fit_IBP = Beta_Binom_IBP(d1, param_IBP, Niter,seeds_g[i])
for(i in 1:length(all_data)){
d1 = all_data[[i]]$data
# MVP-IBP factor model
param_MVPIBP = list(truncP = truncP, # truncation level for MVP-IBP
# parameter of gamma prior for alpha
a_alpha = mean(rowSums(d1)), b_alpha = 1,
eps_MH = 0.5, # epsilon for MH step
gamma = 10, # put the expected number of factors
a_theta = 2, b_theta = 1.5, theta_inf = 0.05, # CUSP parameters
# adaptation
start_adapt = 500, Kmax = p, a0_ad = -1, a1_ad = -5*10^(-4))
fit_gibbs = gibbs_MVPIBP(d1, param_MVPIBP, seeds_g[i], Niter)
# IBP
param_IBP = list(truncP = truncP, # set P for MVP-IBP
# parameter of gamma prior for alpha
a_alpha = mean(rowSums(d1)), b_alpha = 1)
fit_IBP = Beta_Binom_IBP(d1, param_IBP, Niter,seeds_g[i])
# real values
MSEpi_IBP1 = MSEpi_MI1 = rep(0, Niter-burnin)
#--# compue MSE #---#
for(s in 1:(Niter-burnin)){
# MSE for pi IBPP
MSEpi_IBP1[s] = mean((fit_IBP$alpha[,burnin+s] - alphat[i])^2)
# MSE for pi MVP-IBP
MSEpi_MI1[s] = mean((pnorm(fit_gibbs$alpha[,burnin+s]) - alphat[i])^2)
}
MSEpi_fMVPIBP[i] = mean(MSEpi_MI1)
MSEpi_IBP[i] = mean(MSEpi_IBP1)
cat("simulation ",i,"out of",length(all_data),"\n")
}
# real values
MSEpi_IBP1 = MSEpi_MI1 = rep(0, Niter-burnin)
for(s in 1:(Niter-burnin)){
# MSE for pi IBPP
MSEpi_IBP1[s] = mean((fit_IBP$alpha[,burnin+s] - alphat[i])^2)
# MSE for pi MVP-IBP
MSEpi_MI1[s] = mean((pnorm(fit_gibbs$alpha[,burnin+s]) - alphat[i])^2)
}
# MSE for pi IBPP
MSEpi_IBP1[s] = mean((fit_IBP$alpha[,burnin+s] - alphat[i])^2)
alphat[i]
fit_IBP$alpha[,burnin+s]
# MSE for pi IBPP
MSEpi_IBP1[s] = mean((fit_IBP$alpha[burnin+s] - alphat[i])^2)
# MSE for pi MVP-IBP
MSEpi_MI1[s] = mean((pnorm(fit_gibbs$alpha[burnin+s]) - alphat[i])^2)
for(s in 1:(Niter-burnin)){
# MSE for pi IBPP
MSEpi_IBP1[s] = mean((fit_IBP$alpha[burnin+s] - alphat[i])^2)
# MSE for pi MVP-IBP
MSEpi_MI1[s] = mean((pnorm(fit_gibbs$alpha[burnin+s]) - alphat[i])^2)
}
MSEpi_fMVPIBP[i] = mean(MSEpi_MI1)
MSEpi_IBP[i] = mean(MSEpi_IBP1)
mean(MSEpi_MI1)
mean(MSEpi_IBP1)
plot(fit_gibbs$alpha[500:2000], type="l")
plot(fit_IBP$alpha[500:2000], type="l")
alphat[i]
mean(fit_IBP$alpha[500:2000])
mean(fit_gibbs$alpha[500:2000])
for(s in 1:(Niter-burnin)){
# MSE for pi IBPP
MSEpi_IBP1[s] = mean((fit_IBP$alpha[burnin+s] - alphat[i])^2)
# MSE for pi MVP-IBP
MSEpi_MI1[s] = mean((fit_gibbs$alpha[burnin+s] - alphat[i])^2)
}
mean(MSEpi_MI1)
mean(MSEpi_IBP1)
for(i in 1:length(all_data)){
d1 = all_data[[i]]$data
# MVP-IBP factor model
param_MVPIBP = list(truncP = truncP, # truncation level for MVP-IBP
# parameter of gamma prior for alpha
a_alpha = mean(rowSums(d1)), b_alpha = 1,
eps_MH = 0.5, # epsilon for MH step
gamma = 10, # put the expected number of factors
a_theta = 2, b_theta = 1.5, theta_inf = 0.05, # CUSP parameters
# adaptation
start_adapt = 500, Kmax = p, a0_ad = -1, a1_ad = -5*10^(-4))
fit_gibbs = gibbs_MVPIBP(d1, param_MVPIBP, seeds_g[i], Niter)
# IBP
param_IBP = list(truncP = truncP, # set P for MVP-IBP
# parameter of gamma prior for alpha
a_alpha = mean(rowSums(d1)), b_alpha = 1)
fit_IBP = Beta_Binom_IBP(d1, param_IBP, Niter,seeds_g[i])
# real values
MSEpi_IBP1 = MSEpi_MI1 = rep(0, Niter-burnin)
#--# compue MSE #---#
for(s in 1:(Niter-burnin)){
# MSE for pi IBPP
MSEpi_IBP1[s] = mean((fit_IBP$alpha[burnin+s] - alphat[i])^2)
# MSE for pi MVP-IBP
MSEpi_MI1[s] = mean((fit_gibbs$alpha[burnin+s] - alphat[i])^2)
}
MSEpi_fMVPIBP[i] = mean(MSEpi_MI1)
MSEpi_IBP[i] = mean(MSEpi_IBP1)
cat("simulation ",i,"out of",length(all_data),"\n")
}
summary(MSEpi_fMVPIBP)
summary(MSEpi_IBP)
summary(MSEpi_fMVPIBP)
MSEpi_fMVPIBP
plot(fit_gibbs$alpha[500:2000], type="l")
MSEpi_IBP
# MVP-IBP factor model
param_MVPIBP = list(truncP = truncP, # truncation level for MVP-IBP
# parameter of gamma prior for alpha
a_alpha = mean(rowSums(d1)), b_alpha = 1,
eps_MH = 0.3, # epsilon for MH step
gamma = 10, # put the expected number of factors
a_theta = 2, b_theta = 1.5, theta_inf = 0.05, # CUSP parameters
# adaptation
start_adapt = 500, Kmax = p, a0_ad = -1, a1_ad = -5*10^(-4))
fit_gibbs = gibbs_MVPIBP(d1, param_MVPIBP, seeds_g[i], Niter)
plot(fit_gibbs$alpha[500:2000], type="l")
rm(list=ls())
setwd("~/Library/CloudStorage/Dropbox/probit IBP/fungi")
setwd("~/Library/CloudStorage/Dropbox/probit IBP/fungi")
fungi = read_excel("Data_fungi/Species data.xlsx", skip = 1)
fungi = matrix(as.numeric(fungi >0), nrow(fungi), ncol(fungi))
setwd("~/Library/CloudStorage/Dropbox/probit IBP/fungi")
library(readxl)
fungi = read_excel("Data_fungi/Species data.xlsx", skip = 1)
fungi = matrix(as.numeric(fungi >0), nrow(fungi), ncol(fungi))
View(fungi)
save(fungi, file="fungi_binary.Rdata")
setwd("~/Documents/GitHub/MVP-IBP")
load("data/fungi_binary.Rdata")
rm(list=ls())
load("data/fungi_binary.Rdata")
# library(gridExtra)
library(ggplot2)
####---------------------###### histogram ####--------------------######
m1 = apply(fungi, 2, mean)
fungi_prevalence = data.frame(Species = seq(1, NCOL(fungi)), Prevalence = m1)
pl1 = ggplot(fungi_prevalence) +
geom_histogram(aes(x = Prevalence), binwidth = 0.02) +
xlab("Mean prevalence") +
ylab("Count") +
theme_bw()+
theme(axis.title.x = element_text(size = 22),axis.text.x = element_text(size = 22),
axis.title.y = element_text(size = 22), axis.text.y = element_text(size = 22))
pl1
Demp = seq(0,1,by=0.01)
common_emp = rep(0, length(Demp))
for(i in 1:length(Demp)){
common_emp[i] = sum(m1>Demp[i])
}
mean(rowSums(fungi))
alpha = 70
common_PIBP = alpha*exp(-1/2-qnorm(Demp))
common_IBP = -alpha*log(Demp)
dataC = cbind.data.frame(Demp, common_emp, common_PIBP, common_IBP)
dataC_long <- dataC %>% gather(key = "type", value = "value", -Demp)
library(tidyverse)
dataC_long <- dataC %>% gather(key = "type", value = "value", -Demp)
dataC_long$type = as.factor(dataC_long$type)
fcn = ggplot(dataC_long, aes(x = Demp, y = value)) +
geom_line(aes(color = type, linetype=type), size=1.8) +
scale_linetype_manual(values = c("longdash", "solid", "solid"),
labels = c("empirical","IBP", "MVP-IBP")) +
scale_color_manual(values=c("steelblue", "black", "darkred"),
labels = c("empirical","IBP", "MVP-IBP")) +
ylab("Common features") +
xlab(TeX("$\\Delta$")) +
theme_minimal() +
theme(legend.position = c(0.7, 0.6), axis.title.y = element_text(size=22),
axis.title.x = element_text(size=24), legend.text = element_text(size=23),
axis.text.x = element_text(size=18), axis.text.y = element_text(size=18),
legend.title=element_blank())
fcn
library(latex2exp)
fcn = ggplot(dataC_long, aes(x = Demp, y = value)) +
geom_line(aes(color = type, linetype=type), size=1.8) +
scale_linetype_manual(values = c("longdash", "solid", "solid"),
labels = c("empirical","IBP", "MVP-IBP")) +
scale_color_manual(values=c("steelblue", "black", "darkred"),
labels = c("empirical","IBP", "MVP-IBP")) +
ylab("Common features") +
xlab(TeX("$\\Delta$")) +
theme_minimal() +
theme(legend.position = c(0.7, 0.6), axis.title.y = element_text(size=22),
axis.title.x = element_text(size=24), legend.text = element_text(size=23),
axis.text.x = element_text(size=18), axis.text.y = element_text(size=18),
legend.title=element_blank())
fcn
rm(list=ls())
library(latex2exp)
library(tidyverse)
load("data/fungi_binary.Rdata")
m1 = apply(fungi, 2, mean)
fungi_prevalence = data.frame(Species = seq(1, NCOL(fungi)), Prevalence = m1)
sz_t = 22
pl1 = ggplot(fungi_prevalence) +
geom_histogram(aes(x = Prevalence), binwidth = 0.02) +
xlab("Mean prevalence") +
ylab("Count") +
theme_bw()+
theme(axis.title.x = element_text(size = sz_t),
axis.text.x = element_text(size = sz_t),
axis.title.y = element_text(size = sz_t),
axis.text.y = element_text(size = sz_t))
pl1
# empirical common species
Demp = seq(0,1,by=0.01)
common_emp = rep(0, length(Demp))
for(i in 1:length(Demp)){
common_emp[i] = sum(m1>Demp[i])
}
mean(rowSums(fungi))
alpha = 70
common_PIBP = alpha*exp(-1/2-qnorm(Demp)) # common species for MVP-IBP
common_IBP = -alpha*log(Demp) # common species for IBP
dataC = cbind.data.frame(Demp, common_emp, common_PIBP, common_IBP)
dataC_long <- dataC %>% gather(key = "type", value = "value", -Demp)
dataC_long$type = as.factor(dataC_long$type)
fcn = ggplot(dataC_long, aes(x = Demp, y = value)) +
geom_line(aes(color = type, linetype=type), size=1.8) +
scale_linetype_manual(values = c("longdash", "solid", "solid"),
labels = c("empirical","IBP", "MVP-IBP")) +
scale_color_manual(values=c("steelblue", "black", "darkred"),
labels = c("empirical","IBP", "MVP-IBP")) +
ylab("Common features") +
xlab(TeX("$\\Delta$")) +
theme_minimal() +
theme(legend.position = c(0.7, 0.6), axis.title.y = element_text(size=22),
axis.title.x = element_text(size=24), legend.text = element_text(size=23),
axis.text.x = element_text(size=18), axis.text.y = element_text(size=18),
legend.title=element_blank())
fcn
