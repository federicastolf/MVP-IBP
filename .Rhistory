dcommons = gather(dcommons, "type", "value")
exp_commonsIBP = -alpha*log(Delta)
exp_commonsPIBP = alpha*exp(-qnorm(Delta)/2)
f_commons  = ggplot(dcommons, aes(y=value, x=as.factor(type), fill = as.factor(type))) +
geom_boxplot() +
scale_fill_brewer(palette="Set2") +
ylab(expression(c[Delta])) +
geom_hline(yintercept = exp_commonsIBP, colour="blue", linetype="dashed", linewidth=1) +
geom_hline(yintercept = exp_commonsPIBP, colour="brown", linetype="dashed", linewidth=1) +
theme_minimal() + ggtitle(TeX("Mean of $\\c_\\Delta$")) +
theme(axis.title.y = element_text(size=15), axis.title.x =element_blank(),
axis.text.x = element_text(size=sz1), legend.position="none",
plot.title = element_text(hjust = 0.5))
mean_plot = grid.arrange(f_pi, f_ni, f_commons, nrow=1)
#---- variance/mean^2 -------#
var_PIBP = 2*alpha*pnorm(-1/sqrt(2))
dvar = cbind.data.frame(var_niIBP, var_niPIBP_FAC)
names_col = c("IBP", "PIBP_FC")
colnames(dvar) = names_col
dvar = gather(dvar, "type", "value")
f_var  = ggplot(dvar, aes(y=value, x=as.factor(type), fill = as.factor(type))) +
geom_boxplot() +
scale_fill_brewer(palette="Set2") +
geom_hline(yintercept = alpha, colour="blue", linetype="dashed", linewidth=1) +
geom_hline(yintercept = var_PIBP, colour="brown", linetype="dashed", linewidth=1) +
ylab(expression(VAr_n[i])) +
theme_minimal() + ggtitle(TeX("Mean of $\\n_i$")) +
theme(axis.title.y = element_text(size=15), axis.title.x =element_blank(),
axis.text.x = element_text(size=sz1), legend.position="none",
plot.title = element_text(hjust = 0.5))
dm2 = cbind.data.frame(m2_niIBP, m2_niPIBP_FAC)
colnames(dm2) = names_col
dm2 = gather(dm2, "type", "value")
f_m2  = ggplot(dm2, aes(y=value, x=as.factor(type), fill = as.factor(type))) +
geom_boxplot() +
scale_fill_brewer(palette="Set2") +
geom_hline(yintercept = alpha^2+alpha, colour="blue", linetype="dashed", linewidth=1) +
geom_hline(yintercept = var_PIBP, colour="brown", linetype="dashed", linewidth=1) +
ylab(expression(VAr_n[i])) +
theme_minimal() + ggtitle(TeX("Mean of $\\n_i$")) +
theme(axis.title.y = element_text(size=15), axis.title.x =element_blank(),
axis.text.x = element_text(size=sz1), legend.position="none",
plot.title = element_text(hjust = 0.5))
var_plot = grid.arrange(f_var, f_m2, nrow=1)
dpstar = cbind.data.frame(pstar, pstar_PIBP_FAC)
#---- parameters ----#
p=3000
alpha = 30
n = 100
Nsim =  3000
Delta = 0.1
mean_piIBP = mean_niIBP = commons_IBP = pstar = var_niIBP = m2_niIBP = rep(NA, Nsim)
ni_IBP = matrix(NA, Nsim, n)
#---- simulate data ----#
set.seed(142)
for(s in 1:Nsim){
pi_IBP = rbeta(p, alpha/p, 1)
data_IBP = matrix(0, nrow = n, ncol = p)
for (i in 1:n){
data_IBP[i,] <- rbinom(p, 1, pi_IBP)
}
mean_piIBP[s] = mean(pi_IBP)
mean_niIBP[s] = mean(rowSums(data_IBP))
m2_niIBP[s] = mean(rowSums(data_IBP)^2)
var_niIBP[s] = var(rowSums(data_IBP))
commons_IBP[s] = length(pi_IBP[pi_IBP > Delta])
ni_IBP[s,] = rowSums(data_IBP)
pstar[s] = sum(apply(data_IBP != 0, 2, any))
}
mean_piPIBP_FAC = mean_niPIBP_FAC = commons_PIBP_FAC = pstar_PIBP_FAC =
var_niPIBP_FAC= m2_niPIBP_FAC = rep(NA, Nsim)
ni_PIBP_FAC = matrix(NA, Nsim, n)
#---- simulate data ----#
tau = sqrt(2*log(p))
mu = sqrt(1+tau^2)*qnorm(alpha/(alpha + p))
k = 5
set.seed(190)
for(s in 1:Nsim){
beta = rnorm(p, mu, tau)
pi_PIBP = pnorm(beta)
data_PIBP = matrix(0, nrow = n, ncol = p)
# Lambda = matrix(rnorm(p*k), p,k)
# v = sqrt(rowSums(Lambda^2) +1) ## equiv
# beta_star = beta*v
for (i in 1:n){
eps = rnorm(p)
# eta = rnorm(k)
# z = beta_star + Lambda %*% eta + eps
z = beta + eps
data_PIBP[i,] <- as.numeric(z>0)
}
mean_piPIBP_FAC[s] = mean(pi_PIBP)
mean_niPIBP_FAC[s] = mean(rowSums(data_PIBP))
var_niPIBP_FAC[s] = var(rowSums(data_PIBP))
m2_niPIBP_FAC[s] = mean(rowSums(data_PIBP)^2)
commons_PIBP_FAC[s] = length(pi_PIBP[pi_PIBP > Delta])
ni_PIBP_FAC[s,] = rowSums(data_PIBP)
pstar_PIBP_FAC[s] = sum(apply(data_PIBP != 0, 2, any))
#print(s)
}
boxplot(var_niPIBP_FAC)
#--- expected value of ni, pi and C_delta ---#
sz1=10
dni = cbind.data.frame(mean_niIBP, mean_niPIBP_FAC)
#dni = cbind.data.frame(mean_niIBP, mean_niPIBP)
# names_col = c("IBP","PIBP", "PIBP_FC")
names_col = c("IBP", "PIBP_FC")
colnames(dni) = names_col
dni = gather(dni, "type", "value")
f_ni  = ggplot(dni, aes(y=value, x=as.factor(type), fill = as.factor(type))) +
geom_boxplot() +
scale_fill_brewer(palette="Set2") +
geom_hline(yintercept = alpha, colour="blue", linetype="dashed", linewidth=1) +
ylab(expression(n[i])) +
theme_minimal() + ggtitle(TeX("Mean of $\\n_i$")) +
theme(axis.title.y = element_text(size=15), axis.title.x =element_blank(),
axis.text.x = element_text(size=sz1), legend.position="none",
plot.title = element_text(hjust = 0.5))
dpi = cbind.data.frame(mean_piIBP, mean_piPIBP_FAC)
#dpi = cbind.data.frame(mean_piIBP, mean_piPIBP)
colnames(dpi) = names_col
dpi = gather(dpi, "type", "value")
f_pi  = ggplot(dpi, aes(y=value, x=as.factor(type), fill = as.factor(type))) +
geom_boxplot() +
scale_fill_brewer(palette="Set2") +
ylab(expression(pi[j])) +
theme_minimal() + ggtitle(TeX("Mean of $\\pi_j$")) +
theme(axis.title.y = element_text(size=15), axis.title.x =element_blank(),
axis.text.x = element_text(size=sz1), legend.position="none",
plot.title = element_text(hjust = 0.5))
dcommons = cbind.data.frame(commons_IBP, commons_PIBP_FAC)
#dcommons = cbind.data.frame(commons_IBP, commons_PIBP)
colnames(dcommons) = names_col
dcommons = gather(dcommons, "type", "value")
exp_commonsIBP = -alpha*log(Delta)
exp_commonsPIBP = alpha*exp(-qnorm(Delta)/2)
f_commons  = ggplot(dcommons, aes(y=value, x=as.factor(type), fill = as.factor(type))) +
geom_boxplot() +
scale_fill_brewer(palette="Set2") +
ylab(expression(c[Delta])) +
geom_hline(yintercept = exp_commonsIBP, colour="blue", linetype="dashed", linewidth=1) +
geom_hline(yintercept = exp_commonsPIBP, colour="brown", linetype="dashed", linewidth=1) +
theme_minimal() + ggtitle(TeX("Mean of $\\c_\\Delta$")) +
theme(axis.title.y = element_text(size=15), axis.title.x =element_blank(),
axis.text.x = element_text(size=sz1), legend.position="none",
plot.title = element_text(hjust = 0.5))
mean_plot = grid.arrange(f_pi, f_ni, f_commons, nrow=1)
#---- variance/mean^2 -------#
var_PIBP = 2*alpha*pnorm(-1/sqrt(2))
dvar = cbind.data.frame(var_niIBP, var_niPIBP_FAC)
names_col = c("IBP", "PIBP_FC")
colnames(dvar) = names_col
dvar = gather(dvar, "type", "value")
f_var  = ggplot(dvar, aes(y=value, x=as.factor(type), fill = as.factor(type))) +
geom_boxplot() +
scale_fill_brewer(palette="Set2") +
geom_hline(yintercept = alpha, colour="blue", linetype="dashed", linewidth=1) +
geom_hline(yintercept = var_PIBP, colour="brown", linetype="dashed", linewidth=1) +
ylab(expression(VAr_n[i])) +
theme_minimal() + ggtitle(TeX("Mean of $\\n_i$")) +
theme(axis.title.y = element_text(size=15), axis.title.x =element_blank(),
axis.text.x = element_text(size=sz1), legend.position="none",
plot.title = element_text(hjust = 0.5))
dm2 = cbind.data.frame(m2_niIBP, m2_niPIBP_FAC)
colnames(dm2) = names_col
dm2 = gather(dm2, "type", "value")
f_m2  = ggplot(dm2, aes(y=value, x=as.factor(type), fill = as.factor(type))) +
geom_boxplot() +
scale_fill_brewer(palette="Set2") +
geom_hline(yintercept = alpha^2+alpha, colour="blue", linetype="dashed", linewidth=1) +
geom_hline(yintercept = var_PIBP, colour="brown", linetype="dashed", linewidth=1) +
ylab(expression(VAr_n[i])) +
theme_minimal() + ggtitle(TeX("Mean of $\\n_i$")) +
theme(axis.title.y = element_text(size=15), axis.title.x =element_blank(),
axis.text.x = element_text(size=sz1), legend.position="none",
plot.title = element_text(hjust = 0.5))
var_plot = grid.arrange(f_var, f_m2, nrow=1)
var_niIBP
mean(var_niIBP)
2*alpha*pnorm(qnorm(alpha/(alpha+p))/sqrt(1+2*tau^2))
2*alpha*pnorm(-1/sqrt(2))
pnorm(qnorm(alpha/(alpha+p))/sqrt(1+2*tau^2))
pnorm(-1/sqrt(2))
alpha=100
2*alpha*pnorm(qnorm(alpha/(alpha+p))/sqrt(1+2*tau^2))
2*alpha*pnorm(-1/sqrt(2))
2*alpha*pnorm(-1/sqrt(2))
2*alpha*pnorm(-1/sqrt(2))
pnorm(-1/sqrt(2))
pnorm(qnorm(alpha/(alpha+p))/sqrt(1+2*tau^2))
qnorm(alpha/(alpha+p))/sqrt(1+2*tau^2)
-1/sqrt(2)
alpha=1
qnorm(alpha/(alpha+p))/sqrt(1+2*tau^2)
-1/sqrt(2)
qnorm(alpha/(alpha+p))
sqrt(log(alpha/(alpha+p)))
sqrt(-2*log(alpha/(alpha+p)))
2*sqrt(3)*atanh(1-2*(alpha/(alpha+p)))/3.14
p=10^8
2*sqrt(3)*atanh(1-2*(alpha/(alpha+p)))/3.14
sqrt(-2*log(alpha/(alpha+p)))
qnorm(alpha/(alpha+p))
1.724-2.22*sqrt(-log(alpha/()alpha+p))+0.157*(-log(alpha/(alpha+p)))
1.724-2.22*sqrt(-log(alpha/()alpha+p))
1.724-2.22*sqrt(-log(alpha/(alpha+p)))
1.724-2.22*sqrt(-log(alpha/(alpha+p))) +0.157*(-log(alpha/(alpha+p)))
qnorm(alpha/(alpha+p))
library(Rcpp)
library(RcppArmadillo)
library(tidyverse)
require(phyloseq)
library(psadd)
rm(list=ls())
Rcpp::sourceCpp("rcppfuncts/MVPIBPh.cpp")
setwd("~/Documents/GitHub/MVP-IBP")
Rcpp::sourceCpp("rcppfuncts/MVPIBPh.cpp")
source("rfuncts/MVPIBP_functions.R")
#-------# load data #----#
load("data/fungi_binary.Rdata")
load("Data/X_fungi.Rdata")
load("Data/tree_fungi.Rdata")
#----------------# set parameters #-----------------#
max_it = 100
epsilon = 0.00001
m = 15
nmcmc = 20
burnin = 5
a_alpha = 17.5
b_alpha = 0.25
eps_MH = 0.2
prior_var = 10
eta0_rho = 0
nu0_rho = 0.01
gamma0_rho = 0.01 # a_omega
lambda0_sq_rho = 0.01 # b_omega
truncP = 2
set.seed(434)
fungi = fungi[,1:50]
#---------# fit hierarchical  MVP-IBP for fungi data #--------#
fit_MVPIBP = MVP_IBPh(fungi, X_fungi,eta0_rho, nu0_rho, gamma0_rho, lambda0_sq_rho,
a_alpha, b_alpha,prior_var,max_it, epsilon, m, nmcmc, burnin,
eps_MH, truncP)
n = nrow(X_fungi)
# constuct a dataframe with site as factor
df1 = cbind.data.frame(id=c(1:n), X_fungi[,2:4])
colnames(df1)[2:4]=c("1","3","4")
covariate_fungi = df1 %>%
pivot_longer(-id) %>%
group_by(id) %>%
slice(which.max(as.integer(factor(name))*value))%>%
mutate(name = if_else(value == 0, '2',name), value= NULL)
colnames(covariate_fungi)[2] = "site"
covariate_fungi$site = as.factor(covariate_fungi$site)
# matrix with taxonomic tree
tax_matAB = tree_fungi %>% filter(Phylum %in% c("Ascomycota","Basidiomycota"))
tax_matAB = as.matrix(tax_matAB)
phylo_fungiAB = build_phylo(covariate_fungi, fit_MVPIBP, tax_matAB, X_fungi)
# interactive krona plots
# type "no_cov" instead of "site" for the taxonomic composition in all samples
plot_krona(phylo_fungiAB, "fungiAB", "site", trim=T)
plot_krona(phylo_fungiAB, "fungiAB", "no_cov", trim=T)
setwd("~/Documents/GitHub/MVP-IBP")
library(Rcpp)
library(RcppArmadillo)
library(tidyverse)
library(latex2exp)
library(gridExtra)
library(bigMVP)
rm(list=ls())
source("rfuncts/MVPIBP_functions.R")
Rcpp::sourceCpp("rcppfuncts/MVPIBPh.cpp")
#-----# load data #-----#
load("Data/X_fungi.Rdata")
load("data/fungi_binary.Rdata")
cov_data = as.data.frame(X_fungi)
Nrep = 50
## site 1 and 2
fungi1 = fungi[cov_data$site_id1 == 1,]
cov1 = cov_data[cov_data$site_id1 == 1,]
nf1 = nrow(fungi1)
fungi2 = fungi[cov_data$site_id1 == 0 & cov_data$site_id3 == 0  &
cov_data$site_id4 == 0,]
cov2 = cov_data[cov_data$site_id1 == 0 & cov_data$site_id3 == 0  &
cov_data$site_id4 == 0,]
nf2 = nrow(fungi2)
pstar1_obs = compute_pstar(fungi1)
rm(list=ls())
source("rfuncts/MVPIBP_functions.R")
rm(list=ls())
Rcpp::sourceCpp("rcppfuncts/MVPIBPh.cpp")
source("rfuncts/MVPIBP_functions.R")
#-------# load data #----#
load("data/fungi_binary.Rdata")
load("Data/X_fungi.Rdata")
load("Data/tree_fungi.Rdata")
#----------------# set parameters #-----------------#
max_it = 100
epsilon = 0.00001
m = 15
nmcmc = 200
burnin = 50
a_alpha = 17.5
b_alpha = 0.25
eps_MH = 0.2
prior_var = 10
eta0_rho = 0
nu0_rho = 0.01
gamma0_rho = 0.01 # a_omega
lambda0_sq_rho = 0.01 # b_omega
truncP = 200
set.seed(434)
truncP = 20
nmcmc = 20
burnin = 5
fungi = fungi[,1:50]
#---------# fit hierarchical  MVP-IBP for fungi data #--------#
fit_MVPIBP = MVP_IBPh(fungi, X_fungi,eta0_rho, nu0_rho, gamma0_rho, lambda0_sq_rho,
a_alpha, b_alpha,prior_var,max_it, epsilon, m, nmcmc, burnin,
eps_MH, truncP)
n = nrow(X_fungi)
# constuct a dataframe with site as factor
df1 = cbind.data.frame(id=c(1:n), X_fungi[,2:4])
colnames(df1)[2:4]=c("1","3","4")
covariate_fungi = df1 %>%
pivot_longer(-id) %>%
group_by(id) %>%
slice(which.max(as.integer(factor(name))*value))%>%
mutate(name = if_else(value == 0, '2',name), value= NULL)
colnames(covariate_fungi)[2] = "site"
covariate_fungi$site = as.factor(covariate_fungi$site)
# matrix with taxonomic tree
tax_matAB = tree_fungi %>% filter(Phylum %in% c("Ascomycota","Basidiomycota"))
tax_matAB = as.matrix(tax_matAB)
phylo_fungiAB = build_phylo(covariate_fungi, fit_MVPIBP, tax_matAB, X_fungi)
# interactive krona plots
# type "no_cov" instead of "site" for the taxonomic composition in all samples
plot_krona(phylo_fungiAB, "fungiAB", "site", trim=T)
require(phyloseq)
library(psadd)
# interactive krona plots
# type "no_cov" instead of "site" for the taxonomic composition in all samples
plot_krona(phylo_fungiAB, "fungiAB", "site", trim=T)
rm(list=ls())
source("rfuncts/MVPIBP_functions.R")
Rcpp::sourceCpp("rcppfuncts/MVPIBPh.cpp")
#-----# load data #-----#
load("Data/X_fungi.Rdata")
load("data/fungi_binary.Rdata")
cov_data = as.data.frame(X_fungi)
Nrep = 50
## site 1 and 2
fungi1 = fungi[cov_data$site_id1 == 1,]
cov1 = cov_data[cov_data$site_id1 == 1,]
nf1 = nrow(fungi1)
fungi2 = fungi[cov_data$site_id1 == 0 & cov_data$site_id3 == 0  &
cov_data$site_id4 == 0,]
cov2 = cov_data[cov_data$site_id1 == 0 & cov_data$site_id3 == 0  &
cov_data$site_id4 == 0,]
nf2 = nrow(fungi2)
pstar1_obs = compute_pstar(fungi1)
pstar2_obs = compute_pstar(fungi2)
rm(list=ls())
source("rfuncts/MVPIBP_functions.R")
Rcpp::sourceCpp("rcppfuncts/MVPIBPh.cpp")
#-----# load data #-----#
load("Data/X_fungi.Rdata")
load("data/fungi_binary.Rdata")
cov_data = as.data.frame(X_fungi)
Nrep = 50
fungi = fungi[,1:50]
## site 1 and 2
fungi1 = fungi[cov_data$site_id1 == 1,]
cov1 = cov_data[cov_data$site_id1 == 1,]
nf1 = nrow(fungi1)
fungi2 = fungi[cov_data$site_id1 == 0 & cov_data$site_id3 == 0  &
cov_data$site_id4 == 0,]
cov2 = cov_data[cov_data$site_id1 == 0 & cov_data$site_id3 == 0  &
cov_data$site_id4 == 0,]
nf2 = nrow(fungi2)
pstar1_obs = compute_pstar(fungi1)
pstar2_obs = compute_pstar(fungi2)
set.seed(854)
# site 1
Nobs_test1 = round(nf1*0.25)
sampled_rows1 = sample(nf1, Nobs_test1)
row_indices1 = which(cov_data$site_id1 == 1)[sampled_rows1]
X_train1 = X_fungi[-row_indices1,]
Y_train1 = fungi[-row_indices1, ]
# site2
Nobs_test2 = round(nf2*0.25)
sampled_rows2 = sample(nf2, Nobs_test2)
row_indices2 = which(cov_data$site_id1 == 0 & cov_data$site_id3 == 0
& cov_data$site_id4 == 0)[sampled_rows2]
X_train2 = X_fungi[-row_indices2,]
Y_train2 = fungi[-row_indices2, ]
# NB in bigMVP the input model matrix X doesn't include the intercept
q1 = ncol(X_train1) -1
q2 = ncol(X_train2)-1
eta01 = rep(0, q1+1)
eta02 = rep(0, q2+1)
nu0 = 0.001
gamma01 = q1+1
gamma02 = q2+1
Lambda01 = diag(q1+1)
Lambda02 = diag(q1+1)
eta0_rho = 0
nu0_rho = 0.01
gamma0_rho = 0.01
lambda0_sq_rho = 0.01
max_it = 100
epsilon = 0.0001
m = 15
nmcmc = 20
burnin = 5
truncP = 2
Y1b = cbind(Y_train1, matrix(0, nrow(Y_train1), truncP))
Y2b= cbind(Y_train2, matrix(0, nrow(Y_train2), truncP))
set.seed(434)
bigMVPfit1 = bigMVPh(Y1b, X_train1[,-1], eta01, nu0, gamma01, Lambda01,
eta0_rho, nu0_rho, gamma0_rho, lambda0_sq_rho, max_it,
epsilon, m, nmcmc, burnin)
bigMVPfit2 = bigMVPh(Y2b, X_train2[,-1], eta02, nu0, gamma02, Lambda02,
eta0_rho, nu0_rho, gamma0_rho, lambda0_sq_rho, max_it,
epsilon, m, nmcmc, burnin)
#------# predictions for p*_n #-------#
mseed = 354
# site 1
pstar1_bM = pred_pstarMVP(bigMVPfit1, Nrep, mseed, cov1, fungi1)
pstar1q_bM = apply(pstar1_bM, 2, quantile, probs=c(0.05,0.95))
pstar1m_bM = apply(pstar1_bM, 2, mean)
# site 2
pstar2_bM = pred_pstarMVP(bigMVPfit2, Nrep, mseed, cov2, fungi2)
pstar2q_bM = apply(pstar2_bM, 2, quantile, probs=c(0.05,0.95))
pstar2m_bM = apply(pstar2_bM, 2, mean)
###-----------------### fit hierarchical MVP-IBP model ####------------------###
a_alpha = 17.5
b_alpha = 0.25
eps_MH = 0.2
prior_var = 15
mvpIBPfit1 = MVP_IBPh(Y_train1, X_train1, eta0_rho, nu0_rho, gamma0_rho, lambda0_sq_rho,
a_alpha, b_alpha,prior_var,max_it, epsilon, m, nmcmc, burnin,
eps_MH, truncP)
mvpIBPfit2 = MVP_IBPh(Y_train2, X_train2, eta0_rho, nu0_rho, gamma0_rho, lambda0_sq_rho,
a_alpha, b_alpha,prior_var,max_it, epsilon, m, nmcmc, burnin,
eps_MH, truncP)
# site 1
pstar1_MVPIBP = pred_pstarMVP(mvpIBPfit1, Nrep, mseed, cov1, fungi1)
pstar1o_q = apply(pstar1_MVPIBP, 2, quantile, probs=c(0.05,0.95))
pstar1o_m = apply(pstar1_MVPIBP, 2, mean)
# site 2
pstar2_MVPIBP = pred_pstarMVP(mvpIBPfit2, Nrep, mseed, cov2, fungi2)
pstar2o_q = apply(pstar2_MVPIBP, 2, quantile, probs=c(0.05,0.95))
pstar2o_m = apply(pstar2_MVPIBP, 2, mean)
#---------# fit IBP #-------#
Y_train1IBP = cbind(fungi1[-sampled_rows1, ])
Y_train2IBP = cbind(fungi2[-sampled_rows2, ])
MCMC_IBP = 2000
burnin_IBP = 1000
param_IBP = list(truncP = truncP, a_alpha = a_alpha, b_alpha = b_alpha)
IBP1 = Beta_Binom_IBP(Y_train1IBP, param_IBP, MCMC_IBP, mseed)
IBP2 = Beta_Binom_IBP(Y_train2IBP, param_IBP, MCMC_IBP, mseed)
#-------# predictions #-------#
pstar1_IBP = pred_pstarIBP(IBP1, Nrep, mseed, burnin_IBP, MCMC_IBP, fungi1)
pstar1IBP_q = apply(pstar1_IBP, 2, quantile, probs=c(0.05,0.95))
pstar1IBP_m = apply(pstar1_IBP, 2, mean)
## site 2
pstar2_IBP = pred_pstarIBP(IBP2, Nrep, mseed, burnin_IBP, MCMC_IBP, fungi2)
pstar2IBP_q = apply(pstar2_IBP, 2, quantile, probs=c(0.05,0.95))
pstar2IBP_m = apply(pstar2_IBP, 2, mean)
data_site1 = cbind.data.frame(c(1:nf1),  t(pstar1o_q), pstar1o_m, t(pstar1IBP_q),
pstar1IBP_m, t(pstar1q_bM), pstar1m_bM, pstar1_obs,
rep(nf1 - Nobs_test1, nf1), rep("Site1", nf1))
colnames(data_site1) = c("n", "lb_MV", "ub_MV", "median_MV", "lb_IB", "ub_IB",
"median_IB", "lb_bM", "ub_bM", "median_bM","obs",
"test_tresh","site")
data_site2 = cbind.data.frame(c(1:nf2),  t(pstar2o_q), pstar2o_m, t(pstar2IBP_q),
pstar2IBP_m, t(pstar2q_bM), pstar2m_bM, pstar2_obs,
rep(nf2 - Nobs_test2, nf2), rep("Site2", nf2))
colnames(data_site2) = c("n", "lb_MV", "ub_MV", "median_MV", "lb_IB", "ub_IB",
"median_IB","lb_bM", "ub_bM", "median_bM", "obs",
"test_tresh","site")
dataplot = rbind.data.frame(data_site1, data_site2)
shadealpha = 0.4
linesize = 1
szp = 2
stp = 1
f1 = ggplot(data = dataplot) +
geom_ribbon(aes(x = n, ymax = ub_IB, ymin = lb_IB), alpha = shadealpha,  fill = "steelblue") +
geom_line(aes(n, ub_IB), linetype= "dotted", color = "steelblue") +
geom_line(aes(n, lb_IB), linetype = "dotted", color = "steelblue") +
geom_line(aes(n, median_IB, color = "forestgreen"), linewidth = linesize) +
geom_ribbon(aes(x = n, ymax = ub_bM, ymin = lb_bM), alpha = shadealpha, fill = "forestgreen") +
geom_line(aes(n, lb_bM), linetype= "dotted", color = "forestgreen") +
geom_line(aes(n, ub_bM), linetype = "dotted", color = "forestgreen") +
geom_line(aes(n, median_bM, color = "steelblue"), linewidth = linesize) +
geom_ribbon(aes(x = n, ymax = ub_MV, ymin = lb_MV), alpha = shadealpha, fill = "red") +
geom_line(aes(n, lb_MV), linetype= "dotted", color = "red") +
geom_line(aes(n, ub_MV), linetype = "dotted", color = "red") +
geom_line(aes(n, median_MV, color = "darkred"), linewidth = linesize) +
geom_point(aes(n, obs), color = 'black', shape = 19,
size = stp, stroke = stp, alpha=0.5) +
scale_color_manual(values=c("darkred","steelblue", "forestgreen"),
labels = c("MVP-IBP", "IBP", "bigMVP")) +
geom_vline(aes(xintercept = test_tresh), linetype= "longdash", linewidth = 0.8) +
labs(y = TeX("$p^*_n$"), x= "n") +
theme_light() +
facet_wrap(~ site, scales = "free") +
theme(text = element_text(size = 16), legend.title=element_blank(),
legend.text = element_text(size=16),
legend.position = "top", strip.text = element_text(size=16))
f1
